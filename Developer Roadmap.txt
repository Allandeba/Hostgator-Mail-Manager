Required for correct system operation:
  * Registered Email at the desired domain for use.
  * One or more email accounts for administration.
  * Hostgator generated token for management through an API.

What is expected from the software:
Opening software for the first time:
  Version Control:
    * Check for new software updates.
      * If there are any updates, show a message and proceed to its download.
        * After the download is complete, open the executable to install the new version.
      * If it was not authorize to download the new release, do not open the software.
    * If it does not exist, proceed with opening the login screen.

  Check the existence of the configuration file:
    * If there is no configuration file:
      * User must enter to the configuration screen and set the informations.	
    * If there is a configuration file:
      * Load configuration using "Singleton" to be used in the system.
      * Populate user login information

Settings:
  When opening the settings, if there is information populated in the Class used with Singleton, use it to populate the values.
  Need an Edit with the possibility of showing or not the Token information
    * Never load populated. To show the token information needs to retrieve it from configuration file using the admin's password.

  Saving new settings:
    * Validate if all data are filled in;
    * Save the Token information into the config file, encrypting the information.
    * Use the settings as "Singleton" to be used throughout the system after loggedin.

System usage:
  After logging in to the system, load all e-mail accounts registered for that domain.
    * Add the information in a ComboBox for selection.
  
  Usability:
    * Addition of new emails.
    * Changing password of existing emails.
    * Delete an existing email.
    * If requested to change an email account of the user used to access the application, it needs to request "API access" screen for user confirmation.
    * Never lets delete the admin user.

Error handling:
  * Need to use a message handled for system errors
  * Demonstrate a friendly message with the reported error.

Unitary tests:
  * Need to create a unit test that guarantees full functionality of the system:
    * Access;
    * Inclusion of email;
    * Changing passwords;
    * Deletion of emails;